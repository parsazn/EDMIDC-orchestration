version: '3'

volumes:
  db:
    driver: local
  influxdb-data:
  postgres-data:

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    ports:
      - ${ZOOKEEPER_PORT}:${ZOOKEEPER_CLIENT_PORT}
    networks:
      - my_network
    container_name: zookeeper

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - ${KAFKA_PORT}:29092
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    networks:
      - my_network
    container_name: kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KAFKA_CLUSTERS_0_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=${KAFKA_CLUSTERS_0_ZOOKEEPER}
    networks:
      - my_network
    container_name: kafka-ui

  grafana:
    image: grafana/grafana:9.5.2
    ports:
      - ${GRAFANA_PORT}:3000
    restart: unless-stopped
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - my_network
    container_name: grafana
    depends_on: [db]

  influxdb:
    image: influxdb:2
    container_name: influxdb
    ports:
      - ${INFLUXDB_PORT}:8086
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - ./config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${DOCKER_INFLUXDB_INIT_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN}
      - DOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME=${DOCKER_INFLUXDB_INIT_CLI_CONFIG_NAME}
    healthcheck:
      test: [ "CMD", "curl", "-f" , "http://localhost:8086/ping" ]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - my_network

  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - db:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      interval: 30s
      timeout: 60s
      retries: 5
    networks:
      - my_network
    container_name: coreDB

  saveservice:
    image: parsazendehdel/edmidc-save-service:v1.0.1
    ports:
      - "8080:8080"
    networks:
      - my_network
    container_name: saveservice
    depends_on: [influxdb,db,kafka,zookeeper]

  producerservice-bitcoin:
    image: parsazendehdel/edmidc-producer-service:v1.0.0
    ports:
      - "8081:8081"
    networks:
      - my_network
    container_name: producerservice-bitcoin
    depends_on: [influxdb,db,kafka,zookeeper]

networks:
  my_network:
    driver: bridge